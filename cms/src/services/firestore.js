import { db } from "./firebase";
import {  
  collection, 
  addDoc, 
  getDocs, 
  updateDoc, 
  deleteDoc, 
  doc, 
  serverTimestamp, 
  query, 
  where,
  getDoc, 
  setDoc
} from "firebase/firestore";

const reservationsRef = collection(db, "reservations");

// ðŸ“Œ Criar uma nova reserva garantindo que todos os campos obrigatÃ³rios estÃ£o preenchidos
export const createReservation = async (reservationData) => {
  try {
    // ðŸ“Œ ValidaÃ§Ã£o dos campos obrigatÃ³rios
    if (!reservationData.name || !reservationData.email || !reservationData.phone) {
      throw new Error("Nome, e-mail e telefone sÃ£o obrigatÃ³rios.");
    }
    if (!reservationData.startDate || !reservationData.endDate) {
      throw new Error("Datas de inÃ­cio e fim sÃ£o obrigatÃ³rias.");
    }

    // ðŸ“Œ Salvar os timestamps corretamente
    const docRef = await addDoc(reservationsRef, {
      name: reservationData.name,
      email: reservationData.email,
      phone: reservationData.phone,
      startDate: reservationData.startDate, // Deve ser um timestamp vÃ¡lido
      endDate: reservationData.endDate, // Deve ser um timestamp vÃ¡lido
      confirmed: false, // ComeÃ§a como nÃ£o confirmada
      createdAt: serverTimestamp(),
    });

    console.log("Reserva criada com ID:", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("Erro ao adicionar reserva:", error);
    throw error; // RelanÃ§ar erro para capturar na interface
  }
};

// ðŸ“Œ Listar todas as reservas
export const getAllReservations = async () => {
  try {
    const querySnapshot = await getDocs(query(reservationsRef));
    return querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error("Erro ao listar reservas: ", error);
    return [];
  }
};

// ðŸ“Œ Listar reservas de um usuÃ¡rio especÃ­fico
export const getReservations = async (userId) => {
  try {
    const q = query(reservationsRef, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error("Erro ao listar reservas: ", error);
    return [];
  }
};

// ðŸ“Œ Atualizar uma reserva
export const updateReservation = async (reservationId, updatedData) => {
  try {
    const reservationRef = doc(db, "reservations", reservationId);
    await updateDoc(reservationRef, updatedData);
    console.log("Reserva atualizada com sucesso!");
  } catch (error) {
    console.error("Erro ao atualizar reserva: ", error);
  }
};

// ðŸ“Œ Excluir uma reserva
export const deleteReservation = async (reservationId) => {
  try {
    await deleteDoc(doc(db, "reservations", reservationId));
    console.log("Reserva excluÃ­da com sucesso!");
  } catch (error) {
    console.error("Erro ao excluir reserva: ", error);
  }
};

// ðŸ“Œ Buscar todas as reservas confirmadas e gerar lista de datas bloqueadas
export const getConfirmedReservations = async () => {
  try {
    const q = query(reservationsRef, where("confirmed", "==", true));
    const querySnapshot = await getDocs(q);

    let blockedDates = [];
    
    querySnapshot.docs.forEach((doc) => {
      const data = doc.data();
      if (data.startDate && data.endDate) {
        const start = data.startDate.toDate();
        const end = data.endDate.toDate();
        
        // ðŸ“Œ Gerar todas as datas entre startDate e endDate
        let currentDate = new Date(start);
        while (currentDate <= end) {
          blockedDates.push(new Date(currentDate));
          currentDate.setDate(currentDate.getDate() + 1); // Incrementa um dia
        }
      }
    });

    return blockedDates;
  } catch (error) {
    console.error("Erro ao buscar reservas confirmadas:", error);
    return [];
  }
};

// Buscar conteÃºdo de uma pÃ¡gina
export const getPageContent = async (page) => {
  try {
    const docRef = doc(db, "pages", page); // ReferÃªncia ao documento
    const docSnap = await getDoc(docRef); // ObtÃ©m o documento

    return docSnap.exists() ? docSnap.data() : null;
  } catch (error) {
    console.error("Erro ao buscar conteÃºdo da pÃ¡gina:", error);
    return null;
  }
};

// Atualizar conteÃºdo de uma pÃ¡gina
export const updatePageContent = async (page, content) => {
  try {
    const docRef = doc(db, "pages", page); // ReferÃªncia ao documento
    await setDoc(docRef, content, { merge: true }); // Atualiza ou mescla com dados existentes
    console.log(`PÃ¡gina "${page}" atualizada com sucesso!`);
  } catch (error) {
    console.error("Erro ao atualizar a pÃ¡gina:", error);
  }
};

const messagesRef = collection(db, "messages");

export const getAllMessages = async () => {
  try {
    const querySnapshot = await getDocs(query(messagesRef));
    return querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error("Erro ao listar reservas: ", error);
    return [];
  }
};

export const getMessages = async (userId) => {
  try {
    const q = query(messagesRef, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error("Erro ao listar reservas: ", error);
    return [];
  }
};

export const updateMessages = async (messageId, updatedData) => {
  try {
    const reservationRef = doc(db, "messages", messageId);
    await updateDoc(reservationRef, updatedData);
    console.log("Reserva atualizada com sucesso!");
  } catch (error) {
    console.error("Erro ao atualizar reserva: ", error);
  }
};

export const deleteMessages = async (messageId) => {
  try {
    await deleteDoc(doc(db, "messages", messageId));
    console.log("Reserva excluÃ­da com sucesso!");
  } catch (error) {
    console.error("Erro ao excluir reserva: ", error);
  }
};

// Definimos uma referÃªncia fixa para o documento de identidade.
const identityDocRef = doc(db, "identity", "config");

export const createIdentity = async (identityData) => {
  try {
    // Cria ou sobrescreve o documento de identidade com os dados passados.
    await setDoc(identityDocRef, identityData);
    console.log("Identidade criada com sucesso!");
    return identityDocRef.id; // Retorna "config"
  } catch (error) {
    console.error("Erro ao criar identidade:", error);
    throw error;
  }
};

export const getIdentity = async () => {
  try {
    const docSnap = await getDoc(identityDocRef);
    return docSnap.exists() ? docSnap.data() : null;
  } catch (error) {
    console.error("Erro ao buscar identidade:", error);
    return null;
  }
};

export const updateIdentity = async (updatedData) => {
  try {
    console.log(updatedData)
    await updateDoc(identityDocRef, updatedData);
    console.log("Identidade atualizada com sucesso!");
  } catch (error) {
    console.error("Erro ao atualizar identidade:", error);
    throw error;
  }
};

export const deleteIdentity = async () => {
  try {
    await deleteDoc(identityDocRef);
    console.log("Identidade excluÃ­da com sucesso!");
  } catch (error) {
    console.error("Erro ao excluir identidade:", error);
    throw error;
  }
};

export const getLogo = async () => {
  try {
    const data = await getDoc(identityDocRef);
    return data.data().logoUrl;
  } catch (error) {
    console.error("Erro ao buscar logo:", error);
    return null;
  }
};